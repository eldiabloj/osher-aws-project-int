pipeline {
    agent none // Define the agent at the stage level

    parameters {
        choice(name: 'AGENT_TYPE', choices: ['kubernetes-pods', 'ec2'], description: 'Select the agent type for the pipeline.')
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'eldiabloj/polybot:latest')
    }

    stages {
        stage('Select Agent') {
            steps {
                script {
                    if (params.AGENT_TYPE == 'ec2') {
                        // Use the EC2 agent
                        agent {
                            label 'osher-ec2-fleet'
                        }
                    } else {
                        // Use the Kubernetes pod agent
                        agent {
                            docker {
                                image "eldiabloj/dockerfile_agent:latest"
                                args "--user root -v /var/run/docker.sock:/var/run/docker.sock"
                            }
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-jenkinse', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                    script {
                        try {
                            dir('app') {
                                sh "docker login -u ${USERNAME} -p ${USERPASS}"
                                sh "docker build -t ${IMG_NAME} ."
                            }
                        } catch (Exception e) {
                            echo "Docker build failed: ${e.message}"
                            error "Build failed: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker tag ${IMG_NAME} ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                    sh "docker push ${DOCKER_REGISTRY}:${BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy polybot to dev') {
            steps {
                script {
                    // This echo command simulates deployment. Add actual deployment commands here.
                    echo 'docker-compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d'
                    echo 'docker-compose -f docker-compose.yaml up -d'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    docker.image("${DOCKER_REGISTRY}:${BUILD_NUMBER}").inside("-w /app") {
                        sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install mastodon.py tweepy
                        grep -v 'polybot' app/requirements.txt > temp_requirements.txt
                        pip install -r temp_requirements.txt
                        rm temp_requirements.txt
                        pylint --disable=C0301,C0114,E1101,C0116,C0103,W0718,E0401,W0613,R1722,W0612,R0912,C0304,C0115,R1705,E1136 app/polybot/*.py
                        deactivate
                        '''
                    }
                }
            }
        }

        stage('Verify Docker Image') {
            steps {
                script {
                    sh "docker images ${IMG_NAME}"
                }
            }
        }

        stage('Snyk Scan') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')
                    ]) {
                        sh "snyk auth ${SNYK_TOKEN}"
                        echo "snyk container test ${IMG_NAME} --policy-path=.snyk"
                    }
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    echo "Starting Unit Tests"
                    docker.image("${DOCKER_REGISTRY}:${BUILD_NUMBER}").inside {
                        sh '''
                        echo "Current directory:"
                        pwd

                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install mastodon.py tweepy
                        grep -v 'polybot' app/requirements.txt > temp2_requirements.txt
                        pip install -r temp2_requirements.txt
                        rm temp2_requirements.txt
                        pip install pytest-xdist pytest-timeout

                        # Run pytest with verbosity and timeout for each test
                        python3 -m pytest -n 4 --timeout=60 --junitxml results.xml app/test/*.py
                        deactivate
                        '''
                    }
                    echo "Unit Tests completed"
                }
            }
        }

        stage('Run from another repository/functions') {
            steps {
                script {
                    sh '''
                    # Clone the repository containing my.py
                    git clone https://github.com/eldiabloj/osher-s-shared-lib.git

                    # Change directory to the cloned repository
                    cd osher-s-shared-lib

                    # Run the my.py script
                    python3 my.py
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                // Stop and remove any running containers related to this build
                sh """
                    docker ps -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | xargs -r docker stop
                    docker ps -a -q -f ancestor=${DOCKER_REGISTRY}:${BUILD_NUMBER} | xargs -r docker rm -f
                """

                // Remove images related to this build except the latest
                sh """
                    docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | grep '${DOCKER_REGISTRY}' | grep -v ':latest' | grep -v ':${BUILD_NUMBER}' | awk '{print \$2}' | xargs -r docker rmi -f
                """

                // Clean workspace
                cleanWs()
            }
        }
    }
}
